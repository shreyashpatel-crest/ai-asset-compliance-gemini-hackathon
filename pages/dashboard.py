import json
from threading import Thread

import pandas as pd
import streamlit as st

import app_navbar
import core.scan as scanner
from constant import *
from core.chatbot.chat import chat_container
from utils import (
    change_button_colour,
    get_asset_data,
    load_chatbot_context,
    load_checkpoints,
    padding_markdown,
)


def filter_application_data(asset_data, filter_value):
    application_data = {}

    for key, asset in asset_data.items():
        compliance_value = asset.get("asset_compliant", False)
        if compliance_value == filter_value:
            application_data[asset.get("hostname", "")] = asset

    return application_data


def filter_windows_data(asset_data, filter_value):
    windows_data = {}

    for key, asset in asset_data.items():
        if asset.get("windows_compliant", False) == filter_value:
            windows_data[asset.get("hostname", "")] = asset

    return windows_data


def count_windows_compliance(assets_data):
    windows_compliance_count = 0
    windows_compliance_percentage = 0
    non_windows_compliance_percentage = 0

    for _, asset in assets_data.items():
        if asset.get("windows_compliant", False):
            windows_compliance_count += 1

    total_devices = len(assets_data)
    if total_devices != 0:
        windows_compliance_percentage = (windows_compliance_count / total_devices) * 100
        non_windows_compliance_percentage = (
            (total_devices - windows_compliance_count) / total_devices
        ) * 100

    windows_compliance_counts = {
        "windows_compliance_count": windows_compliance_count,
        "windows_compliance_percentage": windows_compliance_percentage,
        "windows_non_compliance_count": total_devices - windows_compliance_count,
        "windows_non_compliance_percentage": non_windows_compliance_percentage,
    }
    return windows_compliance_counts


def count_asset_compliance(assets_data):
    asset_compliance_count = 0
    windows_compliance_count = 0
    app_compliance_count = 0
    asset_compliance_percentage = 0

    for _, asset in assets_data.items():
        if asset.get("windows_compliant", False) and asset.get(
            "asset_compliant", False
        ):
            asset_compliance_count += 1

        if asset.get("windows_compliant", False):
            windows_compliance_count += 1

        if asset.get("asset_compliant", False):
            app_compliance_count += 1

    total_devices = len(assets_data)
    if total_devices != 0:
        asset_compliance_percentage = (asset_compliance_count / total_devices) * 100
        non_asset_compliance_percentage = (
            (total_devices - asset_compliance_count) / total_devices
        ) * 100

    asset_compliance_counts = {
        "asset_compliance_count": asset_compliance_count,
        "asset_compliance_percentage": asset_compliance_percentage,
        "windows_compliance_count": windows_compliance_count,
        "app_compliance_count": app_compliance_count,
    }

    return asset_compliance_counts


def count_application_compliance(assets_data):
    applications_compliance_counts = {}
    total_compliant = 0
    total_app = 0

    for _, asset in assets_data.items():
        for app in asset.get("application_installed", []):
            total_app += 1
            app_name = app.get("name")
            if app_name not in applications_compliance_counts:
                applications_compliance_counts[app_name] = {
                    "compliant": 0,
                    "non_compliant": 0,
                }

            if app.get("is_compliant", False):
                applications_compliance_counts[app_name]["compliant"] += 1
                total_compliant += 1
            else:
                applications_compliance_counts[app_name]["non_compliant"] += 1
    if total_app != 0:
        applications_compliance_counts["percentage_of_compliance"] = (
            total_compliant / total_app
        ) * 100
    applications_compliance_counts["number_of_app"] = total_app

    return applications_compliance_counts


def create_asset_status(asset_data):
    asset_compliance_data = count_asset_compliance(asset_data)
    st.markdown(
        """<p style="font-weight: bold; font-family: Montserrat; margin-bottom: 1px">Overall Asset Compliance</p>
        <hr style="width:50%; text-align:left; margin-left:0; margin-top: 1px; color:black;">
    """,
        unsafe_allow_html=True,
    )

    st.markdown(
        f"""
    <p style="font-size: 20px; margin-bottom: 1px; font-weight: bold; font-family: Montserrat">{asset_compliance_data["asset_compliance_percentage"]:.2f} % Patch Compliance</p>
    <p style="font-family: Montserrat">Compliance % generated by AI assistant.</p>
    <hr style="width:100%;text-align:left;margin-left:0; border-width:2px">
    """,
        unsafe_allow_html=True,
    )

    st.markdown(
        f"""
        <table>
            <tr style="border-style: none;">
                <th style="border-style: none; padding: 3px; font-size: 15px; font-family: Montserrat; font-weight: Bold;">Windows Compliance: </th>
                <th style="border-style: none; padding-left: 15px; font-size: 15px; font-family: Montserrat; font-weight: normal;">{asset_compliance_data["windows_compliance_count"]} of {len(asset_data)} Assets</th>
            </tr style="border-style: none">
            <tr style="border-style: none;">
                <th style="border-style: none; padding: 3px; font-size: 15px; font-family: Montserrat; font-weight: Bold;">Application Compliance: </th>
                <th style="border-style: none; padding-left: 15px; font-size: 15px; font-family: Montserrat; font-weight: normal;">{asset_compliance_data["app_compliance_count"]} of {len(asset_data)} Assets</th>
            </tr style="border-style: none">
        </table>
    """,
        unsafe_allow_html=True,
    )


def create_windows_status(asset_data):
    windows_compliance_data = count_windows_compliance(asset_data)
    st.markdown(
        """<p style="font-weight: bold; font-family: Montserrat; margin-bottom: 1px">Windows Patch Compliance Status</p>
        <hr style="width:69%; text-align:left; margin-left:0; margin-top: 1px; color:black;">
    """,
        unsafe_allow_html=True,
    )

    updated_area = (
        windows_compliance_data["windows_compliance_percentage"] * 360
    ) / 100
    pending_area = (
        windows_compliance_data["windows_non_compliance_percentage"] * 360
    ) / 100

    col1, col2 = st.columns([0.8, 1])
    with col1:
        st.markdown(
            f"""
            <style>
                .piechart {{
                    width: 150px;
                    height: 150px;
                    border-radius: 50%;
                    background-image: conic-gradient(
                        #0068A2 {updated_area}deg,
                        #8ACBEF 0 {pending_area}deg
                    );
                }}
            </style>
            <div class="piechart"></div>
            """,
            unsafe_allow_html=True,
        )
    with col2:
        st.markdown(
            f"""
            <div style="padding-top: 20px; text-align: center">
                <table>
                    <tr style="border-style: none;">
                        <th style="border-style: none;"><span style="height: 10px; width: 10px;  background-color: #0068A2; border-radius: 50%; display: inline-block;"></span></th>
                        <th style="border-style: none; font-size: 14px; font-family: Montserrat; font-weight: normal; text-align: left;">Compliant</th>
                        <th style="border-style: none; padding-left: 10px; font-family: Montserrat;">{windows_compliance_data["windows_compliance_count"]}</th>
                    </tr style="border-style: none">
                    <tr style="border-style: none">
                        <th style="border-style: none;"><span style="height: 10px; width: 10px;  background-color: #8ACBEF; border-radius: 50%; display: inline-block;"></span></th>
                        <th style="border-style: none; font-size: 14px; font-family: Montserrat; font-weight: normal; text-align: left;">Non-compliant</th>
                        <th style="border-style: none; padding-left: 10px; font-family: Montserrat;">{windows_compliance_data["windows_non_compliance_count"]}</th>
                    </tr style="border-style: none">
                </table>
            </div>
            <hr style="width:100%; text-align:left; margin-left:0; margin-bottom: 1px; margin-top: 1px; color:black;">
            <div style="padding-top: 1px; text-align: center;">
                <p style="font-size: 30px; margin-bottom: 1px; margin-top: 1px; font-family: Montserrat;">{windows_compliance_data["windows_compliance_percentage"]:.2f} %</p>
                <p style="font-family: Montserrat;">out of {windows_compliance_data["windows_compliance_count"] + windows_compliance_data["windows_non_compliance_count"]} Assets</p>
            </div>
        """,
            unsafe_allow_html=True,
        )


def create_application_status(asset_data):
    applications_compliance_data = count_application_compliance(asset_data)

    st.markdown(
        """<p style="font-weight: bold; font-family: Montserrat; margin-bottom: 1px">Application Patch Compliance Status</p>
        <hr style="width:74%; text-align:left; margin-left:0; margin-top: 1px; color:black;">
    """,
        unsafe_allow_html=True,
    )

    if len(applications_compliance_data) > 0:
        for i in range(len(APP_LIST)):
            if applications_compliance_data.get(APP_LIST[i]):
                cols = st.columns([0.8, 5, 5])
                with cols[0]:
                    padding_markdown()
                    padding_markdown()
                    st.image(f"icons/{APP_LIST[i]}.svg", width=20)
                with cols[1]:
                    st.markdown(
                        f"""
                        <p style="font-family: Montserrat; font-size: 14px; margin-top: 30px;">{APP_LIST[i]}</p>
                    """,
                        unsafe_allow_html=True,
                    )
                with cols[2]:
                    compliant_percentage = 0
                    compliant_count = applications_compliance_data[APP_LIST[i]][
                        "compliant"
                    ]
                    total = (
                        applications_compliance_data[APP_LIST[i]]["compliant"]
                        + applications_compliance_data[APP_LIST[i]]["non_compliant"]
                    )
                    if total != 0:
                        compliant_percentage = int((compliant_count / total) * 100)
                    st.markdown(
                        """
                    <style>
                        .stProgress > div > div > div > div {
                            background-color: #0068A2;
                        }

                        .stProgress > div > div > div {
                            background-color: #8ACBEF;
                        }
                    </style>
                    """,
                        unsafe_allow_html=True,
                    )
                    st.progress(
                        compliant_percentage,
                        text=f":black[{compliant_count}/{total} Compliant ({compliant_percentage} %)]",
                    )


def create_dashboard(asset_data):
    col1, col2, col3 = st.columns(3)
    with col1:
        with st.container(border=True, height=250):
            create_asset_status(asset_data)
    with col2:
        with st.container(border=True, height=250):
            create_windows_status(asset_data)
    with col3:
        with st.container(border=True, height=250):
            create_application_status(asset_data)


def build_asset_headers_manual(headers_name):
    header_cols = st.columns([1.3, 1.2, 1.3, 1, 1, 1, 1])
    for i, header in enumerate(headers_name):
        with header_cols[i]:
            st.markdown(
                f"""
                    <p style="font-family: Montserrat; font-weight: bold">{header}</p>
                """,
                unsafe_allow_html=True,
            )

    # Insert a visual separator (line) after the headers
    st.markdown(
        "<hr style='margin-top:0.25rem; margin-bottom:0.25rem; box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.5)'/>",
        unsafe_allow_html=True,
    )


def set_seleted_data(data):
    if "data" not in st.session_state:
        st.session_state.data = {}

    st.session_state["data"] = data


def create_asset_table(asset_data):
    cols = st.columns([2, 1, 1])
    with cols[0]:
        st.markdown(
            """<p style="font-weight: bold; font-family: Montserrat; font-size: 24px; padding-top: 30px">Asset List</p>""",
            unsafe_allow_html=True,
        )
    with cols[1]:
        options = ["Select", "Compliance", "Non-compliance"]
        selection = st.selectbox("Windows Patch Compliance status", options)
        if selection == "Compliance":
            asset_data = filter_windows_data(asset_data, True)
        elif selection == "Non-compliance":
            asset_data = filter_windows_data(asset_data, False)
        elif selection == "Select":
            asset_data = asset_data
    with cols[2]:
        options = ["Select", "Compliance", "Non-compliance"]
        selection = st.selectbox("Application Patch Compliance status", options)
        if selection == "Compliance":
            asset_data = filter_application_data(asset_data, True)
        elif selection == "Non-compliance":
            asset_data = filter_application_data(asset_data, False)
        elif selection == "Select":
            asset_data = asset_data

    headers_name = [
        "Asset ID",
        "Windows Patch Compliance Status",
        "Application Patch Compliance Status",
        "Assigned To",
        "OS Version",
        "Installed Application",
        "Action",
    ]

    asset_container = st.container(height=500)
    with asset_container:
        build_asset_headers_manual(headers_name)

        for _, asset in asset_data.items():
            cols = st.columns([1.3, 1.2, 1.3, 1, 1, 1, 1])
            with cols[0]:
                st.markdown(
                    f"""<p style="font-family: Montserrat; font-size: 14px; margin-top: 13px">{asset.get("hostname", "-")}</p>""",
                    unsafe_allow_html=True,
                )
            with cols[1]:
                status = ""
                if asset.get("windows_compliant", False):
                    status = "Compliant"
                    st.markdown(
                        f"""<div style="background-color: #DFF4EA; border: none; border-radius: 20px; width: 85px; height: 22px; text-align: center; margin-top: 13px">
                        <p style="font-size: 14px; color: #2BB472">{status}</p>
                        </div>""",
                        unsafe_allow_html=True,
                    )
                else:
                    status = "Non-compliant"
                    st.markdown(
                        f"""<div style="background-color: #FFDDDB; border: none; border-radius: 20px; width: 110px; height: 22px; text-align: center; margin-top: 13px">
                        <p style="font-size: 14px; color: #FF4238">{status}</p>
                        </div>""",
                        unsafe_allow_html=True,
                    )
            with cols[2]:
                status = ""
                if asset.get("asset_compliant", False):
                    status = "Compliant"
                    st.markdown(
                        f"""<div style="background-color: #DFF4EA; border: none; border-radius: 20px; width: 85px; height: 22px; text-align: center; margin-top: 13px">
                        <p style="font-size: 14px; color: #2BB472">{status}</p>
                        </div>""",
                        unsafe_allow_html=True,
                    )
                else:
                    status = "Non-compliant"
                    st.markdown(
                        f"""<div style="background-color: #FFDDDB; border: none; border-radius: 20px; width: 110px; height: 22px; text-align: center; margin-top: 13px">
                        <p style="font-size: 14px; color: #FF4238">{status}</p>
                        </div>""",
                        unsafe_allow_html=True,
                    )

            with cols[3]:
                st.markdown(
                    f"""<p style="font-family: Montserrat; font-size: 14px; margin-top: 13px">{asset.get("last_login_user", "-")}</p>""",
                    unsafe_allow_html=True,
                )
            with cols[4]:
                st.markdown(
                    f"""<p style="font-family: Montserrat; font-size: 14px; margin-top: 13px">{asset.get("os_version", "")} - {asset.get("kernel_version", "")}</p>""",
                    unsafe_allow_html=True,
                )
            with cols[5]:
                st.markdown(
                    f"""<p style="font-family: Montserrat; font-size: 14px; margin-top: 13px">{len(asset.get("application_installed", []))}</p>""",
                    unsafe_allow_html=True,
                )
            with cols[6]:
                do_action = st.button("View Details", key=asset)
            st.markdown(
                "<hr style='margin-top:0.25rem; margin-bottom:0.25rem;'/>",
                unsafe_allow_html=True,
            )
            if do_action:
                set_seleted_data(asset)
                st.switch_page("pages/asset_details.py")


def load_chatbot():
    """
    A function to load the chatbot interface and styling using HTML and Streamlit components.
    """
    st.markdown(
        """
            <style>
                div[data-testid="stExpander"]
                {
                    right: 0;
                    bottom: 0;
                    position: fixed;
                    margin-bottom: 25px;
                    margin-right: 15px;
                    width: 25rem;
                    background-image: linear-gradient(to right, #7c97ff, #bc75fb);
                    border-radius: 5px;
                }
                div[data-testid="stExpander"] > details > summary
                {
                    padding: 0.75rem 1rem 0rem 1rem
                }
                .st-emotion-cache-g7r313
                {
                    background-color: white
                }
                div[data-testid="stExpander"] > details > summary:hover
                {
                    color: black;
                }
                div[data-testid="stExpander"] > details > summary:hover svg
                {
                    fill: black;
                }
                .st-emotion-cache-s1k4sy > div
                {
                    max-height: 70px;
                }
                details > summary:hover svg
                {
                    transform: rotate(180deg);
                    fill: white !important;
                }
                details > summary > svg
                {
                    transform: rotate(180deg);
                    color: white !important;
                }
                .stAlert
                {
                    display: none;
                }
                .stSpinner > div > i
                {
                    margin-left: 160px
                }
                .st-emotion-cache-6awftf
                {
                    display: block;
                    right: 0rem;
                    position: absolute;
                }
                #ai-security-analyst-chatbot
                {
                    color: white;
                    margin-bottom: 0px;
                }
            </style>
            """,
        unsafe_allow_html=True,
    )

    with st.expander("###### Asset Compliance AI Chatbot", expanded=False):
        chat_container()


def load_dashboard_page():
    st.set_page_config(layout="wide")
    st.text("")
    st.text("")
    st.text("")
    app_navbar.load_navbar(0)

    if "chatbot_context" not in st.session_state:
        st.session_state.chatbot_context = load_chatbot_context()

    if "button_visibility" not in st.session_state:
        st.session_state.button_visibility = True

    check_point_data = load_checkpoints()

    if "refresh_status" not in st.session_state:
        st.session_state.refresh_status = False

    cols = st.columns([4.4, 1, 0.6])
    with cols[0]:
        st.markdown(
            """<link href='https://fonts.googleapis.com/css?family=Montserrat' rel='stylesheet'>
                <p style="font-weight: bold; font-family: Montserrat; font-size: 25px">Dashboard</p>""",
            unsafe_allow_html=True,
        )
    with cols[1]:
        scan_time = load_checkpoints()
        st.markdown(
            f"""<p style="font-color: #C6CAC7; font-family: Montserrat; font-size: 10px; margin-bottom: 0px; text-align: right">Last Scanned</p>
                <p style="font-weight: bold; font-family: Montserrat; font-size: 14px; margin-top: 0px; text-align: right">{scan_time[LAST_SCAN_TIME]}</p>""",
            unsafe_allow_html=True,
        )
    with cols[2]:
        if (not check_point_data.get("scan_in_progress")) and (
            st.session_state.button_visibility
        ):
            do_scan = st.button("Scan Assets")
        else:
            do_scan = st.button("Scanning...", disabled=True)

        change_button_colour("Scan Assets", "#0068A2", "2px solid #0068A2", "#FFFFFF")
        if do_scan:
            st.session_state.refresh_status = True
            st.session_state.button_visibility = False
            # with st.spinner("Scanning Assets..."):
            # scanner.refresh_status()
            st.switch_page("pages/dashboard.py")

    asset_data = get_asset_data()
    if st.session_state.refresh_status or len(asset_data) == 0:
        col1, col2, col3 = st.columns([2, 2, 2])
        with col1:
            st.text("")
        with col3:
            st.text("")
        with col2:
            with st.spinner("Scanning Assets..."):
                refresh_status = Thread(target=scanner.refresh_status)
                refresh_status.start()
                st.session_state.chatbot_context = load_chatbot_context()

        st.session_state.refresh_status = False
    create_dashboard(asset_data)

    st.text("")

    create_asset_table(asset_data)
    # Load chatbot container
    load_chatbot()


load_dashboard_page()
